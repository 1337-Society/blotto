/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { Timestamp, Uint64, InstantiateMsg, InstantiateMsgData, ArmyInfo, BattlefieldInfo, ExecuteMsg, ExecMsg, QueryMsg, QueryMsg1, Uint128, ArrayOfArmy, Army, Battlefield, ArrayOfBattlefield, Config, Addr, PlayerInfoResponse, StakeInfo, GamePhase, StatusResponse } from "./Blotto.types";
import { BlottoQueryClient } from "./Blotto.client";
export interface BlottoReactQuery<TResponse, TData = TResponse> {
  client: BlottoQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface BlottoStatusQuery<TData> extends BlottoReactQuery<StatusResponse, TData> {}
export function useBlottoStatusQuery<TData = StatusResponse>({
  client,
  options
}: BlottoStatusQuery<TData>) {
  return useQuery<StatusResponse, Error, TData>(["blottoStatus", client?.contractAddress], () => client ? client.status() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface BlottoPlayerInfoQuery<TData> extends BlottoReactQuery<PlayerInfoResponse, TData> {
  args: {
    player: string;
  };
}
export function useBlottoPlayerInfoQuery<TData = PlayerInfoResponse>({
  client,
  args,
  options
}: BlottoPlayerInfoQuery<TData>) {
  return useQuery<PlayerInfoResponse, Error, TData>(["blottoPlayerInfo", client?.contractAddress, JSON.stringify(args)], () => client ? client.playerInfo({
    player: args.player
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface BlottoConfigQuery<TData> extends BlottoReactQuery<Config, TData> {}
export function useBlottoConfigQuery<TData = Config>({
  client,
  options
}: BlottoConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(["blottoConfig", client?.contractAddress], () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface BlottoBattlefieldsQuery<TData> extends BlottoReactQuery<ArrayOfBattlefield, TData> {}
export function useBlottoBattlefieldsQuery<TData = ArrayOfBattlefield>({
  client,
  options
}: BlottoBattlefieldsQuery<TData>) {
  return useQuery<ArrayOfBattlefield, Error, TData>(["blottoBattlefields", client?.contractAddress], () => client ? client.battlefields() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface BlottoBattlefieldQuery<TData> extends BlottoReactQuery<Battlefield, TData> {
  args: {
    id: number;
  };
}
export function useBlottoBattlefieldQuery<TData = Battlefield>({
  client,
  args,
  options
}: BlottoBattlefieldQuery<TData>) {
  return useQuery<Battlefield, Error, TData>(["blottoBattlefield", client?.contractAddress, JSON.stringify(args)], () => client ? client.battlefield({
    id: args.id
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface BlottoArmyTotalsByBattlefieldQuery<TData> extends BlottoReactQuery<Uint128, TData> {
  args: {
    armyId: number;
    battlefieldId: number;
  };
}
export function useBlottoArmyTotalsByBattlefieldQuery<TData = Uint128>({
  client,
  args,
  options
}: BlottoArmyTotalsByBattlefieldQuery<TData>) {
  return useQuery<Uint128, Error, TData>(["blottoArmyTotalsByBattlefield", client?.contractAddress, JSON.stringify(args)], () => client ? client.armyTotalsByBattlefield({
    armyId: args.armyId,
    battlefieldId: args.battlefieldId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface BlottoArmyQuery<TData> extends BlottoReactQuery<Army, TData> {
  args: {
    id: number;
  };
}
export function useBlottoArmyQuery<TData = Army>({
  client,
  args,
  options
}: BlottoArmyQuery<TData>) {
  return useQuery<Army, Error, TData>(["blottoArmy", client?.contractAddress, JSON.stringify(args)], () => client ? client.army({
    id: args.id
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface BlottoArmiesQuery<TData> extends BlottoReactQuery<ArrayOfArmy, TData> {}
export function useBlottoArmiesQuery<TData = ArrayOfArmy>({
  client,
  options
}: BlottoArmiesQuery<TData>) {
  return useQuery<ArrayOfArmy, Error, TData>(["blottoArmies", client?.contractAddress], () => client ? client.armies() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}