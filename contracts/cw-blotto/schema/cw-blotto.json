{
  "contract_name": "cw-blotto",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "data"
    ],
    "properties": {
      "data": {
        "$ref": "#/definitions/InstantiateMsgData"
      }
    },
    "definitions": {
      "ArmyInfo": {
        "description": "Army Info used for instantiation",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "description": {
            "description": "The Army's description",
            "type": [
              "string",
              "null"
            ]
          },
          "image_uri": {
            "description": "The Army's image",
            "type": [
              "string",
              "null"
            ]
          },
          "ipfs_uri": {
            "description": "Additional metadata about the army stored offchain",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "description": "The Army name",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "BattlefieldInfo": {
        "description": "Battlefield info used for instantiation",
        "type": "object",
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "description": {
            "description": "The battlefield description",
            "type": [
              "string",
              "null"
            ]
          },
          "image_uri": {
            "description": "The battlefield image",
            "type": [
              "string",
              "null"
            ]
          },
          "ipfs_uri": {
            "description": "Additional metadata about the battlefield stored offchain",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "description": "The Battlefield name",
            "type": "string"
          },
          "value": {
            "description": "The victory point value of the particular battle field",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "Duration": {
        "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "height"
            ],
            "properties": {
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Time in seconds",
            "type": "object",
            "required": [
              "time"
            ],
            "properties": {
              "time": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "InstantiateMsgData": {
        "description": "The instantiation message data for this contract, used to set initial state",
        "type": "object",
        "required": [
          "armies",
          "battle_duration",
          "battlefields",
          "denom"
        ],
        "properties": {
          "armies": {
            "description": "The list of armies",
            "type": "array",
            "items": {
              "$ref": "#/definitions/ArmyInfo"
            }
          },
          "battle_duration": {
            "description": "The duration of the game",
            "allOf": [
              {
                "$ref": "#/definitions/Timestamp"
              }
            ]
          },
          "battlefields": {
            "description": "A list of battlefields",
            "type": "array",
            "items": {
              "$ref": "#/definitions/BattlefieldInfo"
            }
          },
          "denom": {
            "description": "The denom used for staking in this contract",
            "type": "string"
          },
          "staking_limit_config": {
            "description": "The optional config for staking limits",
            "anyOf": [
              {
                "$ref": "#/definitions/StakingLimitConfig"
              },
              {
                "type": "null"
              }
            ]
          },
          "start_time": {
            "description": "The optional start time for the game (requires nanoseconds)",
            "anyOf": [
              {
                "$ref": "#/definitions/Timestamp"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "StakingLimitConfig": {
        "description": "Staking limit configuration for the game",
        "type": "object",
        "required": [
          "amount",
          "cooldown"
        ],
        "properties": {
          "amount": {
            "description": "Limit of stake amount per cooldown",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "cooldown": {
            "description": "Cooldown of staking",
            "allOf": [
              {
                "$ref": "#/definitions/Duration"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "anyOf": [
      {
        "$ref": "#/definitions/ExecMsg"
      }
    ],
    "definitions": {
      "ExecMsg": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "stake"
            ],
            "properties": {
              "stake": {
                "type": "object",
                "required": [
                  "army_id",
                  "battlefield_id"
                ],
                "properties": {
                  "army_id": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  },
                  "battlefield_id": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "tally"
            ],
            "properties": {
              "tally": {
                "type": "object"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "withdraw"
            ],
            "properties": {
              "withdraw": {
                "type": "object"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "anyOf": [
      {
        "$ref": "#/definitions/QueryMsg"
      }
    ],
    "definitions": {
      "QueryMsg": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "armies"
            ],
            "properties": {
              "armies": {
                "type": "object"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "army"
            ],
            "properties": {
              "army": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "army_totals_by_battlefield"
            ],
            "properties": {
              "army_totals_by_battlefield": {
                "type": "object",
                "required": [
                  "army_id",
                  "battlefield_id"
                ],
                "properties": {
                  "army_id": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  },
                  "battlefield_id": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "battlefield"
            ],
            "properties": {
              "battlefield": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "battlefields"
            ],
            "properties": {
              "battlefields": {
                "type": "object"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "config"
            ],
            "properties": {
              "config": {
                "type": "object"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "player_info"
            ],
            "properties": {
              "player_info": {
                "type": "object",
                "required": [
                  "player"
                ],
                "properties": {
                  "player": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "prize_pool"
            ],
            "properties": {
              "prize_pool": {
                "type": "object"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "status"
            ],
            "properties": {
              "status": {
                "type": "object"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "staking_limit_info"
            ],
            "properties": {
              "staking_limit_info": {
                "type": "object",
                "required": [
                  "player"
                ],
                "properties": {
                  "player": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "armies": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Army",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Army"
      },
      "definitions": {
        "Army": {
          "description": "Holds army state",
          "type": "object",
          "required": [
            "id",
            "name",
            "total_staked",
            "victory_points"
          ],
          "properties": {
            "description": {
              "description": "The Army's description",
              "type": [
                "string",
                "null"
              ]
            },
            "id": {
              "description": "The id for the Army",
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "image_uri": {
              "description": "The Army's image",
              "type": [
                "string",
                "null"
              ]
            },
            "ipfs_uri": {
              "description": "Additional metadata about the army stored offchain",
              "type": [
                "string",
                "null"
              ]
            },
            "name": {
              "description": "The Army name",
              "type": "string"
            },
            "total_staked": {
              "description": "The total amount staked for the Army across all battlefields",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "victory_points": {
              "description": "The total victory points for the army, set on game end",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "army": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Army",
      "description": "Holds army state",
      "type": "object",
      "required": [
        "id",
        "name",
        "total_staked",
        "victory_points"
      ],
      "properties": {
        "description": {
          "description": "The Army's description",
          "type": [
            "string",
            "null"
          ]
        },
        "id": {
          "description": "The id for the Army",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "image_uri": {
          "description": "The Army's image",
          "type": [
            "string",
            "null"
          ]
        },
        "ipfs_uri": {
          "description": "Additional metadata about the army stored offchain",
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "description": "The Army name",
          "type": "string"
        },
        "total_staked": {
          "description": "The total amount staked for the Army across all battlefields",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "victory_points": {
          "description": "The total victory points for the army, set on game end",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "army_totals_by_battlefield": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "battlefield": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Battlefield",
      "description": "Holds information about a particular battlefield",
      "type": "object",
      "required": [
        "id",
        "name",
        "value"
      ],
      "properties": {
        "description": {
          "description": "The battlefield description",
          "type": [
            "string",
            "null"
          ]
        },
        "id": {
          "description": "The Battlefield ID",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "image_uri": {
          "description": "The battlefield image",
          "type": [
            "string",
            "null"
          ]
        },
        "ipfs_uri": {
          "description": "Additional metadata about the battlefield stored offchain",
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "description": "The Battlefield name",
          "type": "string"
        },
        "value": {
          "description": "The victory point value of the particular battle field",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "winner": {
          "description": "Winner",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint8",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "battlefields": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Battlefield",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Battlefield"
      },
      "definitions": {
        "Battlefield": {
          "description": "Holds information about a particular battlefield",
          "type": "object",
          "required": [
            "id",
            "name",
            "value"
          ],
          "properties": {
            "description": {
              "description": "The battlefield description",
              "type": [
                "string",
                "null"
              ]
            },
            "id": {
              "description": "The Battlefield ID",
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "image_uri": {
              "description": "The battlefield image",
              "type": [
                "string",
                "null"
              ]
            },
            "ipfs_uri": {
              "description": "Additional metadata about the battlefield stored offchain",
              "type": [
                "string",
                "null"
              ]
            },
            "name": {
              "description": "The Battlefield name",
              "type": "string"
            },
            "value": {
              "description": "The victory point value of the particular battle field",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "winner": {
              "description": "Winner",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "description": "Global configuration for the game",
      "type": "object",
      "required": [
        "battle_duration",
        "denom",
        "start"
      ],
      "properties": {
        "battle_duration": {
          "description": "The duration of the game",
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            }
          ]
        },
        "denom": {
          "description": "The price of staking a soldier on a battlefield",
          "type": "string"
        },
        "staking_limit_config": {
          "description": "The optional staking limit config",
          "anyOf": [
            {
              "$ref": "#/definitions/StakingLimitConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "start": {
          "description": "Game start time",
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Duration": {
          "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "height"
              ],
              "properties": {
                "height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Time in seconds",
              "type": "object",
              "required": [
                "time"
              ],
              "properties": {
                "time": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "StakingLimitConfig": {
          "description": "Staking limit configuration for the game",
          "type": "object",
          "required": [
            "amount",
            "cooldown"
          ],
          "properties": {
            "amount": {
              "description": "Limit of stake amount per cooldown",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "cooldown": {
              "description": "Cooldown of staking",
              "allOf": [
                {
                  "$ref": "#/definitions/Duration"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "player_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PlayerInfoResponse",
      "type": "object",
      "required": [
        "stakes"
      ],
      "properties": {
        "stakes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StakeInfo"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "StakeInfo": {
          "description": "Represents a battlefield stake",
          "type": "object",
          "required": [
            "amount",
            "army",
            "battlefield_id",
            "player"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "army": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "battlefield_id": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "player": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "prize_pool": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_Uint128",
      "anyOf": [
        {
          "$ref": "#/definitions/Uint128"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "staking_limit_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_StakingLimitInfo",
      "anyOf": [
        {
          "$ref": "#/definitions/StakingLimitInfo"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "StakingLimitInfo": {
          "description": "Staking limit info for a user",
          "type": "object",
          "required": [
            "amount",
            "expiration"
          ],
          "properties": {
            "amount": {
              "description": "The amount a user has staked within a period",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "expiration": {
              "description": "The staking limit's expiration",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "status": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "StatusResponse",
      "type": "object",
      "required": [
        "game_phase"
      ],
      "properties": {
        "game_phase": {
          "$ref": "#/definitions/GamePhase"
        },
        "winner": {
          "anyOf": [
            {
              "$ref": "#/definitions/Army"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Army": {
          "description": "Holds army state",
          "type": "object",
          "required": [
            "id",
            "name",
            "total_staked",
            "victory_points"
          ],
          "properties": {
            "description": {
              "description": "The Army's description",
              "type": [
                "string",
                "null"
              ]
            },
            "id": {
              "description": "The id for the Army",
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "image_uri": {
              "description": "The Army's image",
              "type": [
                "string",
                "null"
              ]
            },
            "ipfs_uri": {
              "description": "Additional metadata about the army stored offchain",
              "type": [
                "string",
                "null"
              ]
            },
            "name": {
              "description": "The Army name",
              "type": "string"
            },
            "total_staked": {
              "description": "The total amount staked for the Army across all battlefields",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "victory_points": {
              "description": "The total victory points for the army, set on game end",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "GamePhase": {
          "description": "The possible phases of the game",
          "type": "string",
          "enum": [
            "not_started",
            "open",
            "closed"
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
